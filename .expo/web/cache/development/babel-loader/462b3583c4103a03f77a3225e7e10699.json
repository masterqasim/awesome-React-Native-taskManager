{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\HP\\\\Documents\\\\vscode\\\\AwesomeNativeExpo\\\\node_modules\\\\react-native-emoji-selector\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport emoji from \"emoji-datasource\";\nexport var Categories = {\n  all: {\n    symbol: null,\n    name: \"All\"\n  },\n  history: {\n    symbol: \"🕘\",\n    name: \"Recently used\"\n  },\n  emotion: {\n    symbol: \"😀\",\n    name: \"Smileys & Emotion\"\n  },\n  people: {\n    symbol: \"🧑\",\n    name: \"People & Body\"\n  },\n  nature: {\n    symbol: \"🦄\",\n    name: \"Animals & Nature\"\n  },\n  food: {\n    symbol: \"🍔\",\n    name: \"Food & Drink\"\n  },\n  activities: {\n    symbol: \"⚾️\",\n    name: \"Activities\"\n  },\n  places: {\n    symbol: \"✈️\",\n    name: \"Travel & Places\"\n  },\n  objects: {\n    symbol: \"💡\",\n    name: \"Objects\"\n  },\n  symbols: {\n    symbol: \"🔣\",\n    name: \"Symbols\"\n  },\n  flags: {\n    symbol: \"🏳️‍🌈\",\n    name: \"Flags\"\n  }\n};\n\nvar charFromUtf16 = function charFromUtf16(utf16) {\n  return String.fromCodePoint.apply(String, _toConsumableArray(utf16.split(\"-\").map(function (u) {\n    return \"0x\" + u;\n  })));\n};\n\nexport var charFromEmojiObject = function charFromEmojiObject(obj) {\n  return charFromUtf16(obj.unified);\n};\nvar filteredEmojis = emoji.filter(function (e) {\n  return !e[\"obsoleted_by\"];\n});\n\nvar emojiByCategory = function emojiByCategory(category) {\n  return filteredEmojis.filter(function (e) {\n    return e.category === category;\n  });\n};\n\nvar sortEmoji = function sortEmoji(list) {\n  return list.sort(function (a, b) {\n    return a.sort_order - b.sort_order;\n  });\n};\n\nvar categoryKeys = Object.keys(Categories);\n\nvar TabBar = function TabBar(_ref) {\n  var theme = _ref.theme,\n      activeCategory = _ref.activeCategory,\n      _onPress = _ref.onPress,\n      width = _ref.width;\n  var tabSize = width / categoryKeys.length;\n  return categoryKeys.map(function (c) {\n    var category = Categories[c];\n    if (c !== \"all\") return React.createElement(TouchableOpacity, {\n      key: category.name,\n      onPress: function onPress() {\n        return _onPress(category);\n      },\n      style: {\n        flex: 1,\n        height: tabSize,\n        borderColor: category === activeCategory ? theme : \"#EEEEEE\",\n        borderBottomWidth: 2,\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      style: {\n        textAlign: \"center\",\n        paddingBottom: 8,\n        fontSize: tabSize - 24\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    }, category.symbol));\n  });\n};\n\nvar EmojiCell = function EmojiCell(_ref2) {\n  var emoji = _ref2.emoji,\n      colSize = _ref2.colSize,\n      other = _objectWithoutProperties(_ref2, [\"emoji\", \"colSize\"]);\n\n  return React.createElement(TouchableOpacity, _extends({\n    activeOpacity: 0.5,\n    style: {\n      width: colSize,\n      height: colSize,\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    }\n  }, other, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 3\n    }\n  }), React.createElement(Text, {\n    style: {\n      color: \"#FFFFFF\",\n      fontSize: colSize - 12\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, charFromEmojiObject(emoji)));\n};\n\nvar storage_key = \"@react-native-emoji-selector:HISTORY\";\n\nvar EmojiSelector = function (_Component) {\n  _inherits(EmojiSelector, _Component);\n\n  var _super = _createSuper(EmojiSelector);\n\n  function EmojiSelector() {\n    var _this;\n\n    _classCallCheck(this, EmojiSelector);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      searchQuery: \"\",\n      category: Categories.people,\n      isReady: false,\n      history: [],\n      emojiList: null,\n      colSize: 0,\n      width: 0\n    };\n\n    _this.handleTabSelect = function (category) {\n      if (_this.state.isReady) {\n        if (_this.scrollview) _this.scrollview.scrollToOffset({\n          x: 0,\n          y: 0,\n          animated: false\n        });\n\n        _this.setState({\n          searchQuery: \"\",\n          category: category\n        });\n      }\n    };\n\n    _this.handleEmojiSelect = function (emoji) {\n      if (_this.props.showHistory) {\n        _this.addToHistoryAsync(emoji);\n      }\n\n      _this.props.onEmojiSelected(charFromEmojiObject(emoji));\n    };\n\n    _this.handleSearch = function (searchQuery) {\n      _this.setState({\n        searchQuery: searchQuery\n      });\n    };\n\n    _this.addToHistoryAsync = function _callee(emoji) {\n      var history, value, record, json, _record;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(storage_key));\n\n            case 2:\n              history = _context.sent;\n              value = [];\n\n              if (!history) {\n                record = _extends({}, emoji, {\n                  count: 1\n                });\n                value.push(record);\n              } else {\n                json = JSON.parse(history);\n\n                if (json.filter(function (r) {\n                  return r.unified === emoji.unified;\n                }).length > 0) {\n                  value = json;\n                } else {\n                  _record = _extends({}, emoji, {\n                    count: 1\n                  });\n                  value = [_record].concat(_toConsumableArray(json));\n                }\n              }\n\n              AsyncStorage.setItem(storage_key, JSON.stringify(value));\n\n              _this.setState({\n                history: value\n              });\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.loadHistoryAsync = function _callee2() {\n      var result, history;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(storage_key));\n\n            case 2:\n              result = _context2.sent;\n\n              if (result) {\n                history = JSON.parse(result);\n\n                _this.setState({\n                  history: history\n                });\n              }\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.renderEmojiCell = function (_ref3) {\n      var item = _ref3.item;\n      return React.createElement(EmojiCell, {\n        key: item.key,\n        emoji: item.emoji,\n        onPress: function onPress() {\n          return _this.handleEmojiSelect(item.emoji);\n        },\n        colSize: _this.state.colSize,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 5\n        }\n      });\n    };\n\n    _this.handleLayout = function (_ref4) {\n      var layout = _ref4.nativeEvent.layout;\n\n      _this.setState({\n        width: layout.width\n      }, function () {\n        _this.prerenderEmojis(function () {\n          _this.setState({\n            isReady: true\n          });\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(EmojiSelector, [{\n    key: \"returnSectionData\",\n    value: function returnSectionData() {\n      var _this$state = this.state,\n          history = _this$state.history,\n          emojiList = _this$state.emojiList,\n          searchQuery = _this$state.searchQuery,\n          category = _this$state.category;\n\n      if (category === Categories.all && searchQuery === \"\") {\n        var largeList = [];\n        categoryKeys.forEach(function (c) {\n          var name = Categories[c].name;\n          var list = name === Categories.history.name ? history : emojiList[name];\n          if (c !== \"all\" && c !== \"history\") largeList = largeList.concat(list);\n        });\n        return largeList.map(function (emoji) {\n          return {\n            key: emoji.unified,\n            emoji: emoji\n          };\n        });\n      } else {\n        var list;\n        var hasSearchQuery = searchQuery !== \"\";\n        var name = category.name;\n\n        if (hasSearchQuery) {\n          var filtered = emoji.filter(function (e) {\n            var display = false;\n            e.short_names.forEach(function (name) {\n              if (name.includes(searchQuery.toLowerCase())) display = true;\n            });\n            return display;\n          });\n          list = sortEmoji(filtered);\n        } else if (name === Categories.history.name) {\n          list = history;\n        } else {\n          list = emojiList[name];\n        }\n\n        return list.map(function (emoji) {\n          return {\n            key: emoji.unified,\n            emoji: emoji\n          };\n        });\n      }\n    }\n  }, {\n    key: \"prerenderEmojis\",\n    value: function prerenderEmojis(callback) {\n      var emojiList = {};\n      categoryKeys.forEach(function (c) {\n        var name = Categories[c].name;\n        emojiList[name] = sortEmoji(emojiByCategory(name));\n      });\n      this.setState({\n        emojiList: emojiList,\n        colSize: Math.floor(this.state.width / this.props.columns)\n      }, callback);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          category = _this$props.category,\n          showHistory = _this$props.showHistory;\n      this.setState({\n        category: category\n      });\n\n      if (showHistory) {\n        this.loadHistoryAsync();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          theme = _this$props2.theme,\n          columns = _this$props2.columns,\n          placeholder = _this$props2.placeholder,\n          showHistory = _this$props2.showHistory,\n          showSearchBar = _this$props2.showSearchBar,\n          showSectionTitles = _this$props2.showSectionTitles,\n          showTabs = _this$props2.showTabs,\n          other = _objectWithoutProperties(_this$props2, [\"theme\", \"columns\", \"placeholder\", \"showHistory\", \"showSearchBar\", \"showSectionTitles\", \"showTabs\"]);\n\n      var _this$state2 = this.state,\n          category = _this$state2.category,\n          colSize = _this$state2.colSize,\n          isReady = _this$state2.isReady,\n          searchQuery = _this$state2.searchQuery;\n      var Searchbar = React.createElement(View, {\n        style: styles.searchbar_container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 7\n        }\n      }, React.createElement(TextInput, {\n        style: styles.search,\n        placeholder: placeholder,\n        clearButtonMode: \"always\",\n        returnKeyType: \"done\",\n        autoCorrect: false,\n        underlineColorAndroid: theme,\n        value: searchQuery,\n        onChangeText: this.handleSearch,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 9\n        }\n      }));\n      var title = searchQuery !== \"\" ? \"Search Results\" : category.name;\n      return React.createElement(View, _extends({\n        style: styles.frame\n      }, other, {\n        onLayout: this.handleLayout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 7\n        }\n      }), React.createElement(View, {\n        style: styles.tabBar,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 9\n        }\n      }, showTabs && React.createElement(TabBar, {\n        activeCategory: category,\n        onPress: this.handleTabSelect,\n        theme: theme,\n        width: this.state.width,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 13\n        }\n      })), React.createElement(View, {\n        style: {\n          flex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 9\n        }\n      }, showSearchBar && Searchbar, isReady ? React.createElement(View, {\n        style: {\n          flex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 15\n        }\n      }, showSectionTitles && React.createElement(Text, {\n        style: styles.sectionHeader,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 19\n        }\n      }, title), React.createElement(FlatList, {\n        style: styles.scrollview,\n        contentContainerStyle: {\n          paddingBottom: colSize\n        },\n        data: this.returnSectionData(),\n        renderItem: this.renderEmojiCell,\n        horizontal: false,\n        numColumns: columns,\n        keyboardShouldPersistTaps: \"always\",\n        ref: function ref(scrollview) {\n          return _this2.scrollview = scrollview;\n        },\n        removeClippedSubviews: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 17\n        }\n      }))) : React.createElement(View, _extends({\n        style: styles.loader\n      }, other, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 13\n        }\n      }), React.createElement(ActivityIndicator, {\n        size: \"large\",\n        color: Platform.OS === \"android\" ? theme : \"#000000\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 15\n        }\n      }))));\n    }\n  }]);\n\n  return EmojiSelector;\n}(Component);\n\nexport { EmojiSelector as default };\nEmojiSelector.defaultProps = {\n  theme: \"#007AFF\",\n  category: Categories.all,\n  showTabs: true,\n  showSearchBar: true,\n  showHistory: false,\n  showSectionTitles: true,\n  columns: 6,\n  placeholder: \"Search...\"\n};\nvar styles = StyleSheet.create({\n  frame: {\n    flex: 1,\n    width: \"100%\"\n  },\n  loader: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  tabBar: {\n    flexDirection: \"row\"\n  },\n  scrollview: {\n    flex: 1\n  },\n  searchbar_container: {\n    width: \"100%\",\n    zIndex: 1,\n    backgroundColor: \"rgba(255,255,255,0.75)\"\n  },\n  search: _objectSpread({}, Platform.select({\n    ios: {\n      height: 36,\n      paddingLeft: 8,\n      borderRadius: 10,\n      backgroundColor: \"#E5E8E9\"\n    }\n  }), {\n    margin: 8\n  }),\n  container: {\n    flex: 1,\n    flexWrap: \"wrap\",\n    flexDirection: \"row\",\n    alignItems: \"flex-start\"\n  },\n  sectionHeader: {\n    margin: 8,\n    fontSize: 17,\n    width: \"100%\",\n    color: \"#8F8F8F\"\n  }\n});","map":{"version":3,"sources":["C:/Users/HP/Documents/vscode/AwesomeNativeExpo/node_modules/react-native-emoji-selector/index.js"],"names":["React","Component","emoji","Categories","all","symbol","name","history","emotion","people","nature","food","activities","places","objects","symbols","flags","charFromUtf16","utf16","String","fromCodePoint","split","map","u","charFromEmojiObject","obj","unified","filteredEmojis","filter","e","emojiByCategory","category","sortEmoji","list","sort","a","b","sort_order","categoryKeys","Object","keys","TabBar","theme","activeCategory","onPress","width","tabSize","length","c","flex","height","borderColor","borderBottomWidth","alignItems","justifyContent","textAlign","paddingBottom","fontSize","EmojiCell","colSize","other","color","storage_key","EmojiSelector","state","searchQuery","isReady","emojiList","handleTabSelect","scrollview","scrollToOffset","x","y","animated","setState","handleEmojiSelect","props","showHistory","addToHistoryAsync","onEmojiSelected","handleSearch","AsyncStorage","getItem","value","record","count","push","json","JSON","parse","r","setItem","stringify","loadHistoryAsync","result","renderEmojiCell","item","key","handleLayout","layout","nativeEvent","prerenderEmojis","largeList","forEach","concat","hasSearchQuery","filtered","display","short_names","includes","toLowerCase","callback","Math","floor","columns","placeholder","showSearchBar","showSectionTitles","showTabs","Searchbar","styles","searchbar_container","search","title","frame","tabBar","container","sectionHeader","returnSectionData","loader","Platform","OS","defaultProps","StyleSheet","create","flexDirection","zIndex","backgroundColor","select","ios","paddingLeft","borderRadius","margin","flexWrap"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n  TextInput,\n  Platform,\n  ActivityIndicator,\n  AsyncStorage,\n  FlatList\n} from \"react-native\";\nimport emoji from \"emoji-datasource\";\n\nexport const Categories = {\n  all: {\n    symbol: null,\n    name: \"All\"\n  },\n  history: {\n    symbol: \"🕘\",\n    name: \"Recently used\"\n  },\n  emotion: {\n    symbol: \"😀\",\n    name: \"Smileys & Emotion\"\n  },\n  people: {\n    symbol: \"🧑\",\n    name: \"People & Body\"\n  },\n  nature: {\n    symbol: \"🦄\",\n    name: \"Animals & Nature\"\n  },\n  food: {\n    symbol: \"🍔\",\n    name: \"Food & Drink\"\n  },\n  activities: {\n    symbol: \"⚾️\",\n    name: \"Activities\"\n  },\n  places: {\n    symbol: \"✈️\",\n    name: \"Travel & Places\"\n  },\n  objects: {\n    symbol: \"💡\",\n    name: \"Objects\"\n  },\n  symbols: {\n    symbol: \"🔣\",\n    name: \"Symbols\"\n  },\n  flags: {\n    symbol: \"🏳️‍🌈\",\n    name: \"Flags\"\n  }\n};\n\nconst charFromUtf16 = utf16 =>\n  String.fromCodePoint(...utf16.split(\"-\").map(u => \"0x\" + u));\nexport const charFromEmojiObject = obj => charFromUtf16(obj.unified);\nconst filteredEmojis = emoji.filter(e => !e[\"obsoleted_by\"]);\nconst emojiByCategory = category =>\n  filteredEmojis.filter(e => e.category === category);\nconst sortEmoji = list => list.sort((a, b) => a.sort_order - b.sort_order);\nconst categoryKeys = Object.keys(Categories);\n\nconst TabBar = ({ theme, activeCategory, onPress, width }) => {\n  const tabSize = width / categoryKeys.length;\n\n  return categoryKeys.map(c => {\n    const category = Categories[c];\n    if (c !== \"all\")\n      return (\n        <TouchableOpacity\n          key={category.name}\n          onPress={() => onPress(category)}\n          style={{\n            flex: 1,\n            height: tabSize,\n            borderColor: category === activeCategory ? theme : \"#EEEEEE\",\n            borderBottomWidth: 2,\n            alignItems: \"center\",\n            justifyContent: \"center\"\n          }}\n        >\n          <Text\n            style={{\n              textAlign: \"center\",\n              paddingBottom: 8,\n              fontSize: tabSize - 24\n            }}\n          >\n            {category.symbol}\n          </Text>\n        </TouchableOpacity>\n      );\n  });\n};\n\nconst EmojiCell = ({ emoji, colSize, ...other }) => (\n  <TouchableOpacity\n    activeOpacity={0.5}\n    style={{\n      width: colSize,\n      height: colSize,\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    }}\n    {...other}\n  >\n    <Text style={{ color: \"#FFFFFF\", fontSize: colSize - 12 }}>\n      {charFromEmojiObject(emoji)}\n    </Text>\n  </TouchableOpacity>\n);\n\nconst storage_key = \"@react-native-emoji-selector:HISTORY\";\nexport default class EmojiSelector extends Component {\n  state = {\n    searchQuery: \"\",\n    category: Categories.people,\n    isReady: false,\n    history: [],\n    emojiList: null,\n    colSize: 0,\n    width: 0\n  };\n\n  //\n  //  HANDLER METHODS\n  //\n  handleTabSelect = category => {\n    if (this.state.isReady) {\n      if (this.scrollview)\n        this.scrollview.scrollToOffset({ x: 0, y: 0, animated: false });\n      this.setState({\n        searchQuery: \"\",\n        category\n      });\n    }\n  };\n\n  handleEmojiSelect = emoji => {\n    if (this.props.showHistory) {\n      this.addToHistoryAsync(emoji);\n    }\n    this.props.onEmojiSelected(charFromEmojiObject(emoji));\n  };\n\n  handleSearch = searchQuery => {\n    this.setState({ searchQuery });\n  };\n\n  addToHistoryAsync = async emoji => {\n    let history = await AsyncStorage.getItem(storage_key);\n\n    let value = [];\n    if (!history) {\n      // no history\n      let record = Object.assign({}, emoji, { count: 1 });\n      value.push(record);\n    } else {\n      let json = JSON.parse(history);\n      if (json.filter(r => r.unified === emoji.unified).length > 0) {\n        value = json;\n      } else {\n        let record = Object.assign({}, emoji, { count: 1 });\n        value = [record, ...json];\n      }\n    }\n\n    AsyncStorage.setItem(storage_key, JSON.stringify(value));\n    this.setState({\n      history: value\n    });\n  };\n\n  loadHistoryAsync = async () => {\n    let result = await AsyncStorage.getItem(storage_key);\n    if (result) {\n      let history = JSON.parse(result);\n      this.setState({ history });\n    }\n  };\n\n  //\n  //  RENDER METHODS\n  //\n  renderEmojiCell = ({ item }) => (\n    <EmojiCell\n      key={item.key}\n      emoji={item.emoji}\n      onPress={() => this.handleEmojiSelect(item.emoji)}\n      colSize={this.state.colSize}\n    />\n  );\n\n  returnSectionData() {\n    const { history, emojiList, searchQuery, category } = this.state;\n    if (category === Categories.all && searchQuery === \"\") {\n      //TODO: OPTIMIZE THIS\n      let largeList = [];\n      categoryKeys.forEach(c => {\n        const name = Categories[c].name;\n        const list =\n          name === Categories.history.name ? history : emojiList[name];\n        if (c !== \"all\" && c !== \"history\") largeList = largeList.concat(list);\n      });\n\n      return largeList.map(emoji => ({ key: emoji.unified, emoji }));\n    } else {\n      let list;\n      const hasSearchQuery = searchQuery !== \"\";\n      const name = category.name;\n      if (hasSearchQuery) {\n        const filtered = emoji.filter(e => {\n          let display = false;\n          e.short_names.forEach(name => {\n            if (name.includes(searchQuery.toLowerCase())) display = true;\n          });\n          return display;\n        });\n        list = sortEmoji(filtered);\n      } else if (name === Categories.history.name) {\n        list = history;\n      } else {\n        list = emojiList[name];\n      }\n      return list.map(emoji => ({ key: emoji.unified, emoji }));\n    }\n  }\n\n  prerenderEmojis(callback) {\n    let emojiList = {};\n    categoryKeys.forEach(c => {\n      let name = Categories[c].name;\n      emojiList[name] = sortEmoji(emojiByCategory(name));\n    });\n\n    this.setState(\n      {\n        emojiList,\n        colSize: Math.floor(this.state.width / this.props.columns)\n      },\n      callback\n    );\n  }\n\n  handleLayout = ({ nativeEvent: { layout } }) => {\n    this.setState({ width: layout.width }, () => {\n      this.prerenderEmojis(() => {\n        this.setState({ isReady: true });\n      });\n    });\n  };\n\n  //\n  //  LIFECYCLE METHODS\n  //\n  componentDidMount() {\n    const { category, showHistory } = this.props;\n    this.setState({ category });\n\n    if (showHistory) {\n      this.loadHistoryAsync();\n    }\n  }\n\n  render() {\n    const {\n      theme,\n      columns,\n      placeholder,\n      showHistory,\n      showSearchBar,\n      showSectionTitles,\n      showTabs,\n      ...other\n    } = this.props;\n\n    const { category, colSize, isReady, searchQuery } = this.state;\n\n    const Searchbar = (\n      <View style={styles.searchbar_container}>\n        <TextInput\n          style={styles.search}\n          placeholder={placeholder}\n          clearButtonMode=\"always\"\n          returnKeyType=\"done\"\n          autoCorrect={false}\n          underlineColorAndroid={theme}\n          value={searchQuery}\n          onChangeText={this.handleSearch}\n        />\n      </View>\n    );\n\n    const title = searchQuery !== \"\" ? \"Search Results\" : category.name;\n\n    return (\n      <View style={styles.frame} {...other} onLayout={this.handleLayout}>\n        <View style={styles.tabBar}>\n          {showTabs && (\n            <TabBar\n              activeCategory={category}\n              onPress={this.handleTabSelect}\n              theme={theme}\n              width={this.state.width}\n            />\n          )}\n        </View>\n        <View style={{ flex: 1 }}>\n          {showSearchBar && Searchbar}\n          {isReady ? (\n            <View style={{ flex: 1 }}>\n              <View style={styles.container}>\n                {showSectionTitles && (\n                  <Text style={styles.sectionHeader}>{title}</Text>\n                )}\n                <FlatList\n                  style={styles.scrollview}\n                  contentContainerStyle={{ paddingBottom: colSize }}\n                  data={this.returnSectionData()}\n                  renderItem={this.renderEmojiCell}\n                  horizontal={false}\n                  numColumns={columns}\n                  keyboardShouldPersistTaps={\"always\"}\n                  ref={scrollview => (this.scrollview = scrollview)}\n                  removeClippedSubviews\n                />\n              </View>\n            </View>\n          ) : (\n            <View style={styles.loader} {...other}>\n              <ActivityIndicator\n                size={\"large\"}\n                color={Platform.OS === \"android\" ? theme : \"#000000\"}\n              />\n            </View>\n          )}\n        </View>\n      </View>\n    );\n  }\n}\n\nEmojiSelector.defaultProps = {\n  theme: \"#007AFF\",\n  category: Categories.all,\n  showTabs: true,\n  showSearchBar: true,\n  showHistory: false,\n  showSectionTitles: true,\n  columns: 6,\n  placeholder: \"Search...\"\n};\n\nconst styles = StyleSheet.create({\n  frame: {\n    flex: 1,\n    width: \"100%\"\n  },\n  loader: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  tabBar: {\n    flexDirection: \"row\"\n  },\n  scrollview: {\n    flex: 1\n  },\n  searchbar_container: {\n    width: \"100%\",\n    zIndex: 1,\n    backgroundColor: \"rgba(255,255,255,0.75)\"\n  },\n  search: {\n    ...Platform.select({\n      ios: {\n        height: 36,\n        paddingLeft: 8,\n        borderRadius: 10,\n        backgroundColor: \"#E5E8E9\"\n      }\n    }),\n    margin: 8\n  },\n  container: {\n    flex: 1,\n    flexWrap: \"wrap\",\n    flexDirection: \"row\",\n    alignItems: \"flex-start\"\n  },\n  sectionHeader: {\n    margin: 8,\n    fontSize: 17,\n    width: \"100%\",\n    color: \"#8F8F8F\"\n  }\n});\n"]},"metadata":{},"sourceType":"module"}